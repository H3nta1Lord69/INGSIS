Algoritmo Red_Multicapa
	//funsion de salida sigmoide simetrico
	Definir win,bin,p,st_hidden,st_in,st,at,a,ahidden,wout,bout,whidden,bhidden Como Real
	escribir ("escriba el numero de entradas")
	leer ne // siendo ne = No. entradas
	escribir ("escriba el numero de posibilidades")
	leer np // siendo np= No.posibilidades que se refiere a las combinaciones que pueden tener las entradas
	escribir ("defina el numero de neuronas")
	leer nn //numero de neuronas
	escribir ("defina el numero de neuronas capa oculta")
	leer cn//numero de neuronas capa oculta
	Dimension win[nn,ne] //peso entrada
	Dimension whidden[cn,nn] //pesos ocultos
	Dimension wout[cn] //peso salida
	Dimension p[np,ne]
	Dimension a[np,nn]
	Dimension ahidden[np,cn]
	Dimension se[np]
	Dimension st_hidden[np,cn]
	Dimension st_in[np,nn]
	Dimension at[np]
	//ingreso de valores al azar 
	Para i<-1 hasta nn Con Paso 1 Hacer
		Para j <- 1 Hasta ne Con Paso 1 Hacer
			win[i,j] <- azar(100)+1
		Fin Para
	FinPara
	bin <- azar(100)+1
	Para i<-1 hasta cn Con Paso 1 Hacer
		Para j <- 1 Hasta nn Con Paso 1 Hacer
			whidden[i,j] <- azar(100)+1
		Fin Para
	FinPara
	bhidden <- azar(100)+1
	Para j <- 1 Hasta cn Con Paso 1 Hacer
		wout[j]<- azar(100)+1
	Fin Para
	bout <- azar(100)+1
	// ingreso de valores de entrada P
	Para J<-1 Hasta ne Hacer
		Para I<-1 Hasta np Hacer
			Escribir 'valor de entrada ',I,',para el P',J,':'
			Leer p[I,J]
		FinPara
	FinPara
	//ingreso de valores de salida deseada
	Para I<-1 Hasta np Hacer
		Escribir 'valor de SE',I,' de la neurona '
		Leer se[I] //se = salida esperada
	FinPara
	
	//valores iniciales
	e<-0
	sn <- 0
	aprendizaje<-0.01
	euler <- 2.72
	k<-0 //valor para conteo de interacciones opcional
	Repetir
		
		//CAPA DE ENTRADA
		Para m <- 1 Hasta nn Con Paso 1 Hacer
			//se define las interacciones
			// PASO 1
			para i <- 1 hasta np Con Paso 1 Hacer
				Para j<- 1 Hasta ne Con Paso 1 Hacer
					sn = (win[m,j]*p[i,j])+sn
				Fin Para
				sn= sn + bin
				//funsion de salida
				Si sn >= 1 Entonces
					a[i,m] = 1/(1+euler^(-sn))
				SiNo 
					a[i,m] = 0
				Fin Si
				sn =0 // salida neta valor inicial
			FinPara
		FinPara
		// CAPA OCULTA
		Para m <- 1 Hasta cn Con Paso 1 Hacer
			//se define las interacciones
			// PASO 1
			para i <- 1 hasta np Con Paso 1 Hacer
				Para j<- 1 Hasta nn Con Paso 1 Hacer
					sn = (whidden[m,j]*a[i,j])+sn
				Fin Para
				sn= sn + bhidden
				//funsion de salida
				Si sn >= 1 Entonces
					ahidden[i,m] = 1/(1+euler^(-sn)) //(euler^(sn)-euler^(-sn))/(euler^(sn)+euler^(-sn))
				SiNo 
					ahidden[i,m] = 0
				Fin Si
				sn =0 // salida neta valor inicial
			FinPara
		FinPara
		para i <- 1 hasta np Con Paso 1 Hacer
			Para j<- 1 Hasta cn Con Paso 1 Hacer
				sn = (wout[j]*ahidden[i,j])+sn
			Fin Para
			sn= sn + bout
			//funsion de salida
			Si sn >= 1 Entonces
				at[i] =se[i] 
			SiNo 
				at[i] = 0
			Fin Si
			sn =0 // salida neta valor inicial
		FinPara
			//paso 2 
		//sensibilidad hacia atras
		para i <- 1 hasta np Con Paso 1 Hacer
			e=se[i]-at[i]
			st=-2*at[i]*e
			Para j<- 1 Hasta cn Con Paso 1 Hacer
				st_hidden[i,j]= wout[j]*ahidden[i,j]*st
			Fin Para
		FinPara
		Para m<-1 Hasta cn Con Paso 1 Hacer
			para i <- 1 hasta np Con Paso 1 Hacer
				Para j<- 1 Hasta nn Con Paso 1 Hacer
					st_in[i,j]= whidden[m,j]*a[i,j]*st_hidden[i,m]
				Fin Para
			FinPara
		FinPara
		//paso 3
		//nuevos valores
		Para m<-1 Hasta nn Con Paso 1 Hacer
			Para i<-1 Hasta np Con Paso 1 Hacer
				Para j<- 1 Hasta ne Con Paso 1 Hacer
					win[m,j]=win[m,j]-(aprendizaje*st_in[i,m])
					bin=bin-(aprendizaje*st_in[i,m])
				Fin Para
			FinPara
		FinPara
		Para m<-1 Hasta cn Con Paso 1 Hacer
			Para i<-1 Hasta np Con Paso 1 Hacer
				Para j<- 1 Hasta nn Con Paso 1 Hacer
					whidden[m,j]=whidden[m,j]-(aprendizaje*st_hidden[i,m]*a[i,j])
					bhidden=bhidden-(aprendizaje*st_hidden[i,j])
				Fin Para
			FinPara
		FinPara
		
		Para i<-1 Hasta np Con Paso 1 Hacer
			Para j<- 1 Hasta cn Con Paso 1 Hacer
				wout[j]=wout[j]-(aprendizaje*st*ahidden[i,j])
			Fin Para
			bout=bout-(aprendizaje*st)
		FinPara
	k<-k+1
	Hasta Que  k=100
	//resultados 
	Para I<-1 Hasta np Hacer
		Escribir 'valor de SO',I,' de la neurona total: ',at[I]
	FinPara
	
	Para i<-1 Hasta cn Con Paso 1 Hacer
		Escribir 'valor peso w',i,': ',wout[i]
	Fin Para
	Escribir 'valor bias b: ',bout
	Escribir 'numero de interaciones: ',k
	
FinAlgoritmo
